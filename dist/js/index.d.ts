/// <reference types="user-agent-data-types" />
/// <reference types="js-cookie" />
declare module "src/build-browser" { }
declare module "src/build-client" { }
declare module "src/spec" {
    /**
     * This file was auto-generated by openapi-typescript.
     * Do not make direct changes to the file.
     */
    export interface paths {
        "/identify": {
            /** @description Send an "identify" event. */
            post: operations["Identify_sendIdentify"];
        };
        "/page": {
            /** @description Send a "page" event. */
            post: operations["Page_sendPage"];
        };
    }
    export type webhooks = Record<string, never>;
    export interface components {
        schemas: {
            /** @description Contextual information about the user who "produced" the event. */
            ActivityContext: {
                /** @description Name and version of the library used to send the activity. */
                library?: {
                    name?: string;
                    version?: string;
                };
                /** @description IP address for the user who performed the activity. */
                ip?: components["schemas"]["ipv4"] | components["schemas"]["ipv6"];
                /** @description Locale string for the user who performed the activity. */
                locale?: string;
                /** @description User agent string for the device. */
                userAgent?: string;
                /** @description User agent data for the device. */
                userAgentData?: {
                    brands?: {
                        brand?: string;
                        version?: string;
                    }[];
                    mobile?: boolean;
                    platform?: string;
                };
                /** @description Marketing campaign information. */
                utm?: components["schemas"]["CampaignParams"];
            };
            /** @description Properties that all analytics events share. */
            AnalyticsEventBase: {
                /** @description Type of analytics event being sent. */
                type: components["schemas"]["AnalyticsEventType"];
                /** @description Persistent identifier (e.g., database ID) for the user. */
                userId?: string;
                /** @description Identifier for the user when a persistent ID is not available. */
                anonymousUserId: string;
                /** @description Unique identifier for the user session. */
                sessionId: string;
                /**
                 * Format: date-time
                 * @description Event timestamp of the activity.
                 */
                timestamp: string;
                /**
                 * Format: date-time
                 * @description Timestamp at which the request is sent.
                 *
                 * Typically, this value is nearly identical to `timestamp`. However in some
                 * situations there is latency between when the activity occurs and when it
                 * is sent to Unify.
                 */
                sentAt?: string;
                /** @description Contextual information about the user behind the activity. */
                context: components["schemas"]["ActivityContext"];
                /**
                 * @deprecated
                 * @description Fingerprint information attached to the request.
                 */
                fingerprint?: {
                    visitorId?: string;
                    requestId?: string;
                };
            };
            /**
             * @description Event type supported by the analytics API.
             * @enum {string}
             */
            AnalyticsEventType: "page" | "track" | "identify";
            /** @description UTM parameters for tracking marketing campaigns. */
            CampaignParams: {
                /** @description Source of the campaign. */
                source?: string;
                /** @description Medium of the campaign. */
                medium?: string;
                /** @description Name of the campaign. */
                campaign?: string;
                /** @description Term of the campaign. */
                term?: string;
                /** @description Content of the campaign. */
                content?: string;
            };
            /** @description Identify event. */
            IdentifyEvent: {
                /**
                 * @description Type of analytics event being sent.
                 * @enum {string}
                 */
                type: "identify";
                /** @description Persistent identifier (e.g., database ID) for the user. */
                userId?: string;
                /** @description Identifier for the user when a persistent ID is not available. */
                anonymousUserId: string;
                /** @description Unique identifier for the user session. */
                sessionId: string;
                /**
                 * Format: date-time
                 * @description Event timestamp of the activity.
                 */
                timestamp: string;
                /**
                 * Format: date-time
                 * @description Timestamp at which the request is sent.
                 *
                 * Typically, this value is nearly identical to `timestamp`. However in some
                 * situations there is latency between when the activity occurs and when it
                 * is sent to Unify.
                 */
                sentAt?: string;
                /** @description Contextual information about the user behind the activity. */
                context: components["schemas"]["ActivityContext"];
                /**
                 * @deprecated
                 * @description Fingerprint information attached to the request.
                 */
                fingerprint?: {
                    visitorId?: string;
                    requestId?: string;
                };
                /** @deprecated */
                traits: components["schemas"]["Traits"];
                /** @description Information about the company associated with the visitor. */
                company?: {
                    /** @description Name of the company. */
                    name?: string;
                    /** @description Website domain of the company. */
                    domain: string;
                    /** @description Physical address of the company. */
                    address?: components["schemas"]["UTypes.UAddress"];
                };
                /** @description Information about the person associated with the visitor. */
                person?: {
                    /** @description Email address of the person. */
                    email: string;
                    /** @description Physical address of the person. */
                    address?: components["schemas"]["UTypes.UAddress"];
                    /** @description First name of the person. */
                    firstName?: string;
                    /** @description Last name of the person. */
                    lastName?: string;
                };
            };
            /** @description Page view event. */
            PageEvent: {
                /**
                 * @description Type of analytics event being sent.
                 * @enum {string}
                 */
                type: "page";
                /** @description Persistent identifier (e.g., database ID) for the user. */
                userId?: string;
                /** @description Identifier for the user when a persistent ID is not available. */
                anonymousUserId: string;
                /** @description Unique identifier for the user session. */
                sessionId: string;
                /**
                 * Format: date-time
                 * @description Event timestamp of the activity.
                 */
                timestamp: string;
                /**
                 * Format: date-time
                 * @description Timestamp at which the request is sent.
                 *
                 * Typically, this value is nearly identical to `timestamp`. However in some
                 * situations there is latency between when the activity occurs and when it
                 * is sent to Unify.
                 */
                sentAt?: string;
                /** @description Contextual information about the user behind the activity. */
                context: components["schemas"]["ActivityContext"];
                /**
                 * @deprecated
                 * @description Fingerprint information attached to the request.
                 */
                fingerprint?: {
                    visitorId?: string;
                    requestId?: string;
                };
                /** @description Name of the page that was viewed. */
                name?: string;
                /** @description Details about the page that was viewed. */
                properties?: components["schemas"]["PageProperties"];
            };
            /** @description Details about a page included in a `/page` request. */
            PageProperties: {
                /** @description Path of the page (equivalent to `location.pathname`). */
                path?: string;
                /** @description Query string parameters (equivalent to `location.search`). */
                query?: {
                    [key: string]: string;
                };
                /** @description Referrer page's full URL (equivalent to `document.referrer`). */
                referrer?: string;
                /** @description Page title (equivalent to `document.title`). */
                title?: string;
                /** @description URL of the page (equivalent to `location.href`). */
                url?: string;
            };
            /** @description Traits for the identify request payload. */
            Traits: {
                /** @description Email address of the visitor. */
                email: string;
            };
            /**
             * @description ISO 3166-1 alpha-2 country code.
             * @enum {string}
             */
            UCountryCode: "AD" | "AE" | "AF" | "AG" | "AI" | "AL" | "AM" | "AO" | "AQ" | "AR" | "AS" | "AT" | "AU" | "AW" | "AX" | "AZ" | "BA" | "BB" | "BD" | "BE" | "BF" | "BG" | "BH" | "BI" | "BJ" | "BL" | "BM" | "BN" | "BO" | "BQ" | "BR" | "BS" | "BT" | "BV" | "BW" | "BY" | "BZ" | "CA" | "CC" | "CD" | "CF" | "CG" | "CH" | "CI" | "CK" | "CL" | "CM" | "CN" | "CO" | "CR" | "CU" | "CV" | "CW" | "CX" | "CY" | "CZ" | "DE" | "DJ" | "DK" | "DM" | "DO" | "DZ" | "EC" | "EE" | "EG" | "EH" | "ER" | "ES" | "ET" | "FI" | "FJ" | "FK" | "FM" | "FO" | "FR" | "GA" | "GB" | "GD" | "GE" | "GF" | "GG" | "GH" | "GI" | "GL" | "GM" | "GN" | "GP" | "GQ" | "GR" | "GS" | "GT" | "GU" | "GW" | "GY" | "HK" | "HM" | "HN" | "HR" | "HT" | "HU" | "ID" | "IE" | "IL" | "IM" | "IN" | "IO" | "IQ" | "IR" | "IS" | "IT" | "JE" | "JM" | "JO" | "JP" | "KE" | "KG" | "KH" | "KI" | "KM" | "KN" | "KP" | "KR" | "KW" | "KY" | "KZ" | "LA" | "LB" | "LC" | "LI" | "LK" | "LR" | "LS" | "LT" | "LU" | "LV" | "LY" | "MA" | "MC" | "MD" | "ME" | "MF" | "MG" | "MH" | "MK" | "ML" | "MM" | "MN" | "MO" | "MP" | "MQ" | "MR" | "MS" | "MT" | "MU" | "MV" | "MW" | "MX" | "MY" | "MZ" | "NA" | "NC" | "NE" | "NF" | "NG" | "NI" | "NL" | "NO" | "NP" | "NR" | "NU" | "NZ" | "OM" | "PA" | "PE" | "PF" | "PG" | "PH" | "PK" | "PL" | "PM" | "PN" | "PR" | "PS" | "PT" | "PW" | "PY" | "QA" | "RE" | "RO" | "RS" | "RU" | "RW" | "SA" | "SB" | "SC" | "SD" | "SE" | "SG" | "SH" | "SI" | "SJ" | "SK" | "SL" | "SM" | "SN" | "SO" | "SR" | "SS" | "ST" | "SV" | "SX" | "SY" | "SZ" | "TC" | "TD" | "TF" | "TG" | "TH" | "TJ" | "TK" | "TL" | "TM" | "TN" | "TO" | "TR" | "TT" | "TV" | "TW" | "TZ" | "UA" | "UG" | "UM" | "US" | "UY" | "UZ" | "VA" | "VC" | "VE" | "VG" | "VI" | "VN" | "VU" | "WF" | "WS" | "XK" | "YE" | "YT" | "ZA" | "ZM" | "ZW";
            /** @description Composite object representing a physical address. */
            "UTypes.UAddress": {
                /** @description Country code in ISO 3166-1 alpha-2 format. */
                country?: components["schemas"]["UCountryCode"];
                /** @description State, province, region, or territory. */
                administrativeArea?: string;
                /** @description County or other secondary governmental division of an administrative area. */
                subAdministrativeArea?: string;
                /** @description City, town, or village. */
                locality?: string;
                /** @description Neighborhood, borough, district, or city sector. */
                dependentLocality?: string;
                /** @description Postal code or ZIP code. */
                postalCode?: string;
                /** @description Street name with elements such as street type or direction. */
                thoroughfare?: string;
                /** @description Street number or building name. */
                premise?: string;
                /** @description Apartment, suite, office number, or other secondary unit designator. */
                subPremise?: string;
            };
            /** Format: ipv4 */
            ipv4: string;
            /** Format: ipv6 */
            ipv6: string;
        };
        responses: never;
        parameters: never;
        requestBodies: never;
        headers: never;
        pathItems: never;
    }
    export type $defs = Record<string, never>;
    export type external = Record<string, never>;
    export interface operations {
        /** @description Send an "identify" event. */
        Identify_sendIdentify: {
            requestBody: {
                content: {
                    "application/json": components["schemas"]["IdentifyEvent"];
                };
            };
            responses: {
                /** @description The request has succeeded. */
                200: {
                    content: never;
                };
                /** @description The request has been accepted for processing, but processing has not yet completed. */
                202: {
                    content: never;
                };
                /** @description Access is unauthorized. */
                401: {
                    content: never;
                };
            };
        };
        /** @description Send a "page" event. */
        Page_sendPage: {
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PageEvent"];
                };
            };
            responses: {
                /** @description The request has succeeded. */
                200: {
                    content: never;
                };
                /** @description The request has been accepted for processing, but processing has not yet completed. */
                202: {
                    content: never;
                };
                /** @description Access is unauthorized. */
                401: {
                    content: never;
                };
            };
        };
    }
}
declare module "src/client/storage/utils" {
    /**
     * Encodes an arbitrary value to base-64 encoding for storage.
     *
     * @param value - the value to encode, can be a string, object, etc.
     * @returns the base-64 encoded value
     */
    export function encodeForStorage<T>(value: T): string;
    /**
     * Decodes an encoded value which has been retrieved from storage.
     *
     * @param encodedValue - the value to decode
     * @returns the decoded value
     */
    export function decodeFromStorage<T>(encodedValue: string): T;
    /**
     * Helper function to check if the current browser supports the
     * local storage API.
     *
     * @returns `true` if the browser supports local storage, otherwise `false`
     */
    export function isLocalStorageAvailable(): boolean;
}
declare module "src/client/storage/storage" {
    /**
     * Abstract class for storing generic key/value pairs in a storage service.
     */
    abstract class StorageService {
        private readonly _writeKey;
        constructor(writeKey: string);
        /**
         * Given a generated key, retrieves a value from the underlying
         * storage service.
         *
         * @param key - the generated key to retrieve the associated value for
         * @returns the value associated with the key
         */
        protected abstract retrieveValue(key: string): string | null;
        /**
         * Stores an already-encoded value associated with a given
         * generated key within the underlying storage service.
         *
         * @param key - the generated key to associate with the stored value
         * @param encodedValue - the encoded value to store
         */
        protected abstract storeValue(key: string, encodedValue: string): void;
        /**
         * Gets a value from the underlying storage service by key name.
         *
         * @param key - the key associated with the value to get
         * @returns the value from storage if it exists, otherwise `null`
         */
        get: <T>(key: string) => T | null;
        /**
         * Stores a value in the underlying storage service associated with
         * the given key.
         *
         * @param key - the key to associate with the value to be stored
         * @param value - the value to store
         */
        set: <T>(key: string, value: T) => void;
        /**
         * Generates a unique key using the public Unify API key for
         * storing a value in the underlying storage service.
         *
         * @param suffix - the identifying key to associate with some
         *        value to be stored
         * @returns a "generated" key which includes the given suffix
         *          prefixed with the public Unify API key
         */
        private buildKey;
    }
    export default StorageService;
}
declare module "src/client/storage/cookies" {
    import StorageService from "src/client/storage/storage";
    /**
     * Storage service class for storing and retrieving data via cookies.
     */
    export class CookieStorageService extends StorageService {
        /**
         * Retrieves an encoded value associated with a key from cookies.
         *
         * @param key - the key associated with the value to retrieve
         * @returns the encoded value from cookies if it exists, otherwise `null`
         */
        protected retrieveValue(key: string): string | null;
        /**
         * Stores an encoded value associated with a given key in cookies.
         *
         * @param key - the key associated with the value to store
         * @param encodedValue - the encoded value to store
         */
        protected storeValue(key: string, encodedValue: string): void;
    }
}
declare module "src/client/storage/local-storage" {
    import StorageService from "src/client/storage/storage";
    /**
     * Storage service class for storing and retrieving data via the
     * browser local storage API. Requires the current browser to
     * support local storage.
     */
    export class LocalStorageService extends StorageService {
        private readonly _localStorageAvailable;
        constructor(writeKey: string);
        /**
         * Retrieves an encoded value associated with a key from local storage.
         *
         * @param key - the key associated with the value to retrieve
         * @returns the encoded value from local storage if it exists,
         *          otherwise `null`
         */
        protected retrieveValue: (key: string) => string | null;
        /**
         * Stores an encoded value associated with a given key in local storage.
         *
         * @param key - the key associated with the value to store
         * @param encodedValue - the encoded value to store
         */
        protected storeValue: (key: string, encodedValue: string) => void;
    }
}
declare module "src/client/storage/index" {
    export * from "src/client/storage/cookies";
    export * from "src/client/storage/local-storage";
}
declare module "src/client/managers/identity" {
    export const ANONYMOUS_USER_ID_STORAGE_KEY = "anonymousUserId";
    /**
     * This class is used to store and manage user identity information
     * in the current user's cookies.
     */
    export class IdentityManager {
        private readonly _storageService;
        private _anonymousUserId;
        constructor(writeKey: string);
        /**
         * Gets an anonymous user ID for the current user if one exists,
         * otherwise creates one for them.
         *
         * @returns the anonymous user ID, a randomly generated UUID
         */
        getOrCreateAnonymousUserId: () => string;
        /**
         * Gets the current user's anonymous user ID from cookies if
         * one exists.
         *
         * @returns the anonymous user ID if it exists, else `null`
         */
        private getAnonymousUserId;
        /**
         * Creates a randomly generated anonymous user ID and stores it
         * in cookies.
         *
         * @returns the newly created and stored anonymous user ID
         */
        private createAnonymousUserId;
    }
}
declare module "src/client/utils/helpers" {
    import { PageProperties, UserAgentDataType } from "src/types";
    /**
     * Gets a milliseconds since epoch for `minutes` in the future.
     *
     * @param minutes - number of minutes in the future
     * @param fromTime - the relative time to calculate in the future from
     * @returns the corresponding milliseconds since epoch
     */
    export function getTimeForMinutesInFuture(minutes: number, fromTime?: Date): number;
    /**
     * Gets the properties of the current page used in intent logging.
     */
    export const getCurrentPageProperties: () => PageProperties;
    /**
     * Gets the current user agent data used in intent logging.
     */
    export const getCurrentUserAgentData: () => UserAgentDataType;
    /**
     * Validates a user-entered email address.
     *
     * @param email - the email address to validate
     * @returns the email address if valid, otherwise `undefined`
     */
    export const validateEmail: (email: string) => string | undefined;
    /**
     * Extract the key-value query parameters from a URL.
     *
     * @param url - URL to parse.
     * @returns Object containing the query parameters as key-value pairs.
     */
    export const parseUrlQueryParams: (url: string) => Record<string, string>;
}
declare module "src/client/managers/sessions" {
    import { ClientSession } from "src/types";
    export const CLIENT_SESSION_STORAGE_KEY = "clientSession";
    export const SESSION_MINUTES_TO_EXPIRE = 30;
    /**
     * This class is used to store and manage user session data in
     * local browser storage.
     */
    export class SessionManager {
        private readonly _writeKey;
        private readonly _storageService;
        private _currentSession;
        constructor(writeKey: string);
        /**
         * Gets the current user session if one exists, otherwise creates one.
         *
         * @returns the current or new user session
         */
        getOrCreateSession: () => ClientSession;
        /**
         * Gets the current user session if it exists. If it does exist, also
         * updates the expiration time of the session based on the current time.
         *
         * @returns the current session if it exists, else `undefined`
         */
        private getAndUpdateSession;
        /**
         * Creates a new session in local storage.
         *
         * @param minutesToExpire - optional number of minutes after which the
         *        user session should expire, defaults to `SESSION_MINUTES_TO_EXPIRE`
         * @returns the newly created session
         */
        private createSession;
        /**
         * Updates the expiration time of an existing session in
         * local storage.
         *
         * @param existingSession - the session to update expiration time for
         * @param minutesToExpire - optional number of minutes after which the
         *        session should expire, defaults to `MINUTES_TO_EXPIRE`
         * @returns the updated session object
         */
        private updateSessionExpiration;
        /**
         * Retrieves a session object from local storage.
         *
         * @returns the stored session object, or `null` if none exists
         */
        private getStoredSession;
        /**
         * Stores a session object in local storage.
         *
         * @param session - the session to store
         */
        private setStoredSession;
    }
}
declare module "src/client/managers/index" {
    export * from "src/client/managers/identity";
    export * from "src/client/managers/sessions";
}
declare module "src/client/unify-api-client" {
    /**
     * Basic API client class for making requests to the Unify Intent API.
     */
    export default class UnifyApiClient {
        private readonly _writeKey;
        constructor(writeKey: string);
        post: <TRequest extends object = object>(url: string, payload: TRequest) => void;
        private getAuthString;
    }
}
declare module "src/types" {
    import { IdentityManager, SessionManager } from "src/client/managers/index";
    import UnifyApiClient from "src/client/unify-api-client";
    import { components } from "src/spec";
    export interface UnifyIntentClientConfig {
        /**
         * This option can be specified to indicate that the Unify client
         * should automatically log page events when the current page changes.
         * @default true
         */
        autoPage?: boolean;
        /**
         * This option can be specified to indicate that the Unify client
         * should instantiate an agent which automatically collects user
         * email inputs, contact form submissions, etc.
         * @default false
         */
        autoIdentify?: boolean;
    }
    export interface UnifyIntentContext {
        writeKey: string;
        clientConfig: UnifyIntentClientConfig;
        apiClient: UnifyApiClient;
        sessionManager: SessionManager;
        identityManager: IdentityManager;
    }
    export type ClientSession = {
        sessionId: string;
        expiration: number;
        startTime: Date;
        initial: PageProperties;
    } & UserAgentDataType;
    export interface UserAgentDataType {
        userAgent: NavigatorID['userAgent'];
        userAgentData?: NavigatorUAData;
    }
    export type ActivityContext = components['schemas']['ActivityContext'];
    export type AnalyticsEventType = components['schemas']['AnalyticsEventType'];
    export type AnalyticsEventBase = components['schemas']['AnalyticsEventBase'];
    export type CampaignParams = components['schemas']['CampaignParams'];
    export type IdentifyEvent = components['schemas']['IdentifyEvent'];
    export type IdentifyEventData = Omit<components['schemas']['IdentifyEvent'], keyof Omit<AnalyticsEventBase, 'type'>>;
    export type PageEvent = components['schemas']['PageEvent'];
    export type PageEventData = Omit<components['schemas']['PageEvent'], keyof Omit<AnalyticsEventBase, 'type'>>;
    export type PageProperties = components['schemas']['PageProperties'];
    export type Traits = components['schemas']['Traits'];
    export type UCountryCode = components['schemas']['UCountryCode'];
}
declare module "src/client/constants" {
    export const UNIFY_INTENT_V1_URL = "https://unifyintent.com/analytics/api/v1";
}
declare module "src/client/activities/utils" {
    import { ActivityContext } from "src/types";
    /**
     * Constructs the activity context data which is logged for page,
     * identity, etc. actions.
     *
     * @returns the activity context data
     */
    export const getActivityContext: () => ActivityContext;
}
declare module "src/client/activities/activity" {
    import { AnalyticsEventType, UnifyIntentContext } from "src/types";
    /**
     * Abstract class which other activites should extend. Exposes an interface
     * to track the activity with base activity data and any additional data needed.
     */
    abstract class Activity<TActivityData extends object> {
        protected readonly _intentContext: UnifyIntentContext;
        constructor(intentContext: UnifyIntentContext);
        /**
         * Tracks this activity by sending a POST request with the activity data
         * to the relevant Unify Intent activity URL.
         */
        track(): void;
        /**
         * Gets the type of the activity.
         */
        protected abstract getActivityType(): AnalyticsEventType;
        /**
         * Gets the Unify Intent URL to send the activity data to.
         */
        protected abstract getActivityURL(): string;
        /**
         * Gets the activity data to send along with the base activity data.
         */
        protected abstract getActivityData(): TActivityData;
        /**
         * Generates the "base" activity data which is included by default in the
         * payload for all intent activities which get logged.
         *
         * @returns the base activity data to log
         */
        private getBaseActivityPayload;
    }
    export default Activity;
}
declare module "src/client/activities/page" {
    import { AnalyticsEventType, PageEventData } from "src/types";
    import Activity from "src/client/activities/activity";
    export const UNIFY_INTENT_PAGE_URL = "https://unifyintent.com/analytics/api/v1/page";
    /**
     * Activity for logging a `page` event via the Unify Intent Client.
     */
    export class PageActivity extends Activity<PageEventData> {
        protected getActivityType(): AnalyticsEventType;
        protected getActivityURL(): string;
        protected getActivityData: () => PageEventData;
    }
}
declare module "src/client/activities/identify" {
    import { AnalyticsEventType, IdentifyEventData, UnifyIntentContext } from "src/types";
    import Activity from "src/client/activities/activity";
    export const UNIFY_INTENT_IDENTIFY_URL = "https://unifyintent.com/analytics/api/v1/identify";
    /**
     * Activity for logging an `identify` event via the Unify Intent Client.
     */
    export class IdentifyActivity extends Activity<IdentifyEventData> {
        private readonly _email;
        constructor(intentContext: UnifyIntentContext, { email }: {
            email: string;
        });
        protected getActivityType(): AnalyticsEventType;
        protected getActivityURL(): string;
        protected getActivityData: () => IdentifyEventData;
    }
}
declare module "src/client/activities/index" {
    export * from "src/client/activities/page";
    export * from "src/client/activities/identify";
}
declare module "src/client/unify-intent-agent" {
    import { UnifyIntentContext } from "src/types";
    /**
     * This class acts as an agent to automatically monitor user
     * intent-related activity and log relevant events and data to Unify.
     */
    export default class UnifyIntentAgent {
        private readonly _intentContext;
        private readonly _monitoredInputs;
        private readonly _submittedEmails;
        private _autoPage;
        private _autoIdentify;
        private _historyMonitored;
        constructor(intentContext: UnifyIntentContext);
        /**
         * Tells the Unify Intent Agent to trigger page events when the
         * user's current page changes. Note that this will NOT trigger
         */
        startAutoPage: () => void;
        /**
         * Tells the Unify Intent Agent to NOT trigger page events when the
         * user's current page changes.
         */
        stopAutoPage: () => void;
        /**
         * Tells the Unify Intent Agent to continuously monitor identity-related
         * input elements for changes, and automatically submit identify actions
         * to Unify when the user self-identifies.
         */
        startAutoIdentify: () => void;
        /**
         * Tells the Unify Intent Agent to stop continously monitoring inputs
         * for changes.
         */
        stopAutoIdentify: () => void;
        /**
         * This function adds event listeners and overrides to various
         * history-related browser functions to automatically track when the
         * current page changes. This is important for tracking page changes
         * in single page apps because the Unify Intent Client will only
         * be instantiated a single time.
         */
        private monitorHistory;
        /**
         * Triggers a page event for the current page and context if auto-page
         * is currently set to `true`.
         */
        private maybeTrackPage;
        /**
         * Discards inputs no longer in the DOM and adds new inputs in the DOM
         * to the set of monitored inputs if they qualify for auto-identity.
         */
        private refreshMonitoredInputs;
        /**
         * Blur event handler for a monitored input element.
         *
         * @param event - the relevant event to handle
         */
        private handleInputBlur;
        /**
         * Keydown event handler for a monitored input element. Only actions
         * on the 'Enter' key.
         *
         * @param event - the relevant event to handle
         */
        private handleInputKeydown;
        /**
         * This function checks if the current value of a monitored input is a valid
         * email address and logs an identity action if it has not already been logged.
         *
         * @param event - the event object from a monitored input blur or keydown event
         */
        private maybeIdentifyInputEmail;
        /**
         * DO NOT USE: These methods are exposed only for testing purposes.
         */
        __getMonitoredInputs: () => Set<HTMLInputElement>;
        /**
         * DO NOT USE: These methods are exposed only for testing purposes.
         */
        __getSubmittedEmails: () => Set<string>;
    }
}
declare module "src/client/unify-intent-client" {
    import { UnifyIntentClientConfig } from "src/types";
    export const DEFAULT_UNIFY_INTENT_CLIENT_CONFIG: UnifyIntentClientConfig;
    /**
     * This class is used to leverage the Unify Intent API to log user
     * analytics like page views, sessions, identity, and actions.
     */
    export default class UnifyIntentClient {
        private readonly _context;
        private _intentAgent?;
        constructor(writeKey: string, config?: UnifyIntentClientConfig);
        /**
         * This function logs a page view for the current page to
         * the Unify Intent API.
         */
        page: () => void;
        /**
         * This function logs an identify event for the given email address
         * to the Unify Intent API. Unify will associate this email address
         * with the current user's session and all related activities.
         *
         * @param email - the email address to log an identify event for
         * @returns `true` if the email was valid and logged, otherwise `false`
         */
        identify: (email: string) => boolean;
        /**
         * This function will instantiate an agent which continuously monitors
         * page changes to automatically log page events.
         *
         * The corresponding `stopAutoPage` can be used to temporarily
         * stop the continuous monitoring.
         */
        startAutoPage: () => void;
        /**
         * If continuous page monitoring was previously triggered, this function
         * is used to halt the monitoring.
         *
         * The corresponding `startAutoPage` can be used to start it again.
         */
        stopAutoPage: () => void;
        /**
         * This function will instantiate an agent which continuously monitors
         * input elements on the page to automatically log user self-identification.
         *
         * The corresponding `stopAutoIdentify` can be used to temporarily
         * stop the continuous monitoring.
         */
        startAutoIdentify: () => void;
        /**
         * If continuous input monitoring was previously triggered, this function
         * is used to halt the monitoring.
         *
         * The corresponding `startAutoIdentify` can be used to start it again.
         */
        stopAutoIdentify: () => void;
    }
}
declare module "src/client/index" {
    import UnifyIntentClient from "src/client/unify-intent-client";
    export { UnifyIntentClientConfig } from "src/types";
    export default UnifyIntentClient;
}
declare module "src/browser/index" {
    import UnifyIntentClient from "src/client/index";
    global {
        interface Window {
            unify?: UnifyIntentClient;
        }
    }
    /**
     * Initializes the `UnifyIntentClient` and flushes pre-made method calls
     * from the global context if there are any.
     */
    export const initBrowser: () => void;
}
declare module "src/tests/mocks/data" {
    import { ActivityContext, ClientSession, PageProperties, UserAgentDataType } from "src/types";
    export const TEST_WRITE_KEY = "1234";
    export const TEST_ANONYMOUS_USER_ID = "5678";
    export const MockUTM: {
        source: string;
        medium: string;
        campaign: string;
        term: string;
        content: string;
    };
    export const MockQueryParams: {
        utm_source: string;
        utm_medium: string;
        utm_campaign: string;
        utm_term: string;
        utm_content: string;
    };
    export const MockUrlQuery: string;
    export const testEnvironmentOptions: {
        url: string;
        referrer: string;
        userAgent: string;
    };
    export const MockUserAgentData: UserAgentDataType;
    export const MockClientSession: (overrides?: Partial<ClientSession>) => ClientSession;
    export const MockActivityContext: ActivityContext;
    export const MockPageProperties: PageProperties;
}
declare module "src/tests/browser/browser.unit.test" { }
declare module "src/tests/mocks/intent-context-mock" {
    import { DeepMockProxy } from 'jest-mock-extended';
    import { IdentityManager, SessionManager } from "src/client/managers/index";
    import UnifyApiClient from "src/client/unify-api-client";
    import { UnifyIntentClientConfig } from "src/types";
    export const MockUnifyIntentContext: (config?: UnifyIntentClientConfig) => {
        writeKey: string;
        clientConfig: UnifyIntentClientConfig;
        identityManager: DeepMockProxy<IdentityManager>;
        sessionManager: DeepMockProxy<SessionManager>;
        apiClient: DeepMockProxy<UnifyApiClient>;
    };
}
declare module "src/tests/client/unify-intent-agent.unit.test" { }
declare module "src/tests/client/unify-intent-client.unit.test" { }
declare module "src/tests/client/activities/identify.unit.test" { }
declare module "src/tests/client/activities/page.unit.test" { }
declare module "src/tests/client/managers/identity.unit.test" { }
declare module "src/tests/client/managers/sessions.unit.test" { }
declare module "src/tests/client/storage/cookies.unit.test" {
    import { DeepMockProxy } from 'jest-mock-extended';
    import Cookies from 'js-cookie';
    export const CookiesMock: DeepMockProxy<Cookies.CookiesStatic<string> & {
        noConflict?(): Cookies.CookiesStatic<string>;
    }>;
}
declare module "src/tests/client/storage/local-storage.unit.test" { }
declare module "src/tests/client/storage/utils.unit.test" { }
//# sourceMappingURL=index.d.ts.map